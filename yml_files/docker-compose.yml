version: '3.8'

services:
  # Apache Atlas Service
  atlas:

    image: sburn/apache-atlas:2.3.0
    container_name: atlas
    ports:
      - "21000:21000"
    environment:
      - ATLAS_SERVER_BIND_HOST=0.0.0.0
      - ATLAS_SERVER_OPTS=-server -Xmx2g
    volumes:
      - atlas_data:/opt/apache-atlas/data
      - atlas_logs:/opt/apache-atlas/logs
      - ./config/hive-site.xml:/opt/apache-atlas/conf/hive-site.xml:ro
    networks:
      - etl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:21000/api/atlas/admin/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Apache Airflow (assuming it's already set up, but included for completeness)
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-webserver
    depends_on:
      - airflow-init
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./sample_data.csv:/opt/airflow/sample_data.csv
    networks:
      - etl_network
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./sample_data.csv:/opt/airflow/sample_data.csv
    networks:
      - etl_network
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    command: scheduler

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-init
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    networks:
      - etl_network
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    command: version
    restart: "no"

  # PostgreSQL for Airflow metadata
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - etl_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Spark
  spark:
    image: bitnami/spark:3.3.0
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8090:8080"
      - "7077:7077"
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
      - ./data:/opt/spark/data
    networks:
      - etl_network

  # Apache Spark worker
  spark-worker:
    image: bitnami/spark:3.3.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
      - ./data:/opt/spark/data
    networks:
      - etl_network
    depends_on:
      - spark

  # Apache Hive (Metastore)
  # hive:
  #   image: apache/hive:3.1.3
  #   container_name: hive
  #   ports:
  #     - "9083:9083"  # Metastore
  #     - "10000:10000"  # HiveServer2
  #     - "10002:10002"  # HiveServer2 Web UI
  #   environment:
  #     - HIVE_SITE_CONF_hive_metastore_uris=thrift://localhost:9083
  #   volumes:
  #     - ./config/hive-site.xml:/opt/apache-hive-3.1.3-bin/conf/hive-site.xml:ro
  #     - ./data:/opt/hive/data
  #   networks:
  #     - etl_network
  #   healthcheck:
  #     test: ["CMD", "nc", "-z", "localhost", "9083"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5


  # hive-metastore-postgresql:
  #   image: bde2020/hive-metastore-postgresql:2.3.0
  #   container_name: hive-metastore-postgresql
  #   volumes:
  #     - hive-metastore-postgresql:/var/lib/postgresql
  #   networks:
  #     - etl_network

  # hive-metastore:
  #   image: bde2020/hive:2.3.2-postgresql-metastore
  #   container_name: hive-metastore
  #   env_file:
  #     - ./hive-env.env
  #   environment:
  #     SERVICE_PRECONDITION: "hive-metastore-postgresql:5432"
  #   depends_on:
  #     - hive-metastore-postgresql
  #   networks:
  #     - etl_network

  # hive-server:
  #   image: bde2020/hive:2.3.2-postgresql-metastore
  #   container_name: hive-server
  #   env_file:
  #     - ./hive-env.env
  #   environment:
  #     HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore-postgresql/metastore"
  #     HIVE_CORE_CONF_javax_jdo_option_ConnectionDriverName: "org.postgresql.Driver"
  #     HIVE_CORE_CONF_javax_jdo_option_ConnectionUserName: "hive"
  #     HIVE_CORE_CONF_javax_jdo_option_ConnectionPassword: "hive"
  #     HIVE_CORE_CONF_hive_metastore_uris: "thrift://hive-metastore:9083"
  #     HIVE_CORE_CONF_hive_metastore_schema_verification: "false"
  #     HIVE_CORE_CONF_hive_execution_engine: "tez"
  #     SERVICE_PRECONDITION: "hive-metastore:9083"
      
  #     # Atlas integration
  #     HIVE_SITE_CONF_hive_exec_post_hooks: "org.apache.atlas.hive.hook.HiveHook"
  #     HIVE_SITE_CONF_atlas_hook_hive_synchronous: "true"
  #     HIVE_SITE_CONF_atlas_cluster_name: "primary"
  #     HIVE_SITE_CONF_atlas_rest_address: "http://atlas:21000"
      
  #     # Additional configurations to fix connectivity
  #     HIVE_SERVER2_THRIFT_PORT: "10000"
  #     HIVE_SERVER2_THRIFT_BIND_HOST: "0.0.0.0"
  #     HIVE_SITE_CONF_hive_server2_transport_mode: "binary"
  #     HIVE_SITE_CONF_hive_server2_thrift_bind_host: "0.0.0.0"
  #     HIVE_SITE_CONF_hive_server2_thrift_port: "10000"
  #     HIVE_SITE_CONF_hive_server2_enable_doAs: "false"
  #   ports:
  #     - "10000:10000"
  #     - "10002:10002"
  #   depends_on:
  #     - hive-metastore
  #   networks:
  #     - etl_network
  #   volumes:
  #     - ./data:/input
  #     - ./hive-atlas-bridge:/opt/hive/atlas-hook
  #   command: >
  #     sh -c "
  #     cp -r /opt/hive/atlas-hook/* /opt/hive/lib/ && 
  #     /entrypoint.sh /opt/hive/bin/hiveserver2"

  
volumes:
  atlas_data:
  atlas_logs:
  postgres_data:
  hive-metastore-postgresql:

networks:
  etl_network:
    external: true
